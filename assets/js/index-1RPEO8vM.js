/* empty css             *//* empty css                */import"./el-form-item-l0sNRNKZ.js";/* empty css               *//* empty css                  *//* empty css                     *//* empty css                  *//* empty css                *//* empty css                  */import"./index-C6bx8goA.js";import{d as J,j as B,p as N,q as U,aB as W,c as A,o as L,b as c,w as f,a as i,x as K,u as Q,bJ as Z,D as tt,e as _,z as et,_ as st,$ as ot,L as at,M as nt,t as D,ae as it,V as x}from"./index-ClSyKtod.js";import{i as lt}from"./install-CPD1cr-Y.js";import{_ as rt}from"./_plugin-vue_export-helper-DlAUqK2U.js";const ct={class:"panel-content grid grid-cols-1 lg:grid-cols-2 gap-4"},dt={class:"map-area h-80 border border-gray-300 rounded p-2"},ut={key:0,class:"h-full"},mt={key:1,class:"flex items-center justify-center h-full text-gray-500"},pt={class:"text-center"},ft={class:"mt-2 flex space-x-2"},gt={class:"strategy-result mt-4 p-2 border border-gray-300 rounded"},yt={key:0,class:"text-sm"},ht={class:"bg-gray-100 p-2 rounded"},vt={key:1,class:"text-gray-500"},bt=J({__name:"index",setup(xt,{expose:X}){const m=B({type:"static",strategy:"detour"}),T=N(null);let v=null;const g=N(!1),M=N(null),e=B({agvPosition:[100,100],agvDirection:0,originalPath:[],currentPath:[],obstacles:[],mapWidth:700,mapHeight:400,isSimulating:!1}),q=()=>{if(g.value)return;const s=[100,100],t=[600,300];e.originalPath=[s,[250,150],[400,200],[500,250],t],e.currentPath=[...e.originalPath],e.agvPosition=s,g.value=!0,it(()=>{if(!T.value){console.error("地图容器不存在"),x.error("地图容器不存在"),g.value=!1;return}try{v&&v.dispose(),v=lt(T.value),S(),x.success("地图初始化成功")}catch(a){console.error("地图初始化失败:",a),x.error("地图初始化失败"),g.value=!1}})},S=()=>{if(!v)return;const s={animation:!0,tooltip:{formatter:t=>{if(t.seriesName==="AGV")return`AGV位置: (${t.data[0]}, ${t.data[1]})`;if(t.seriesName==="障碍物"){const a=t.dataIndex,r=e.obstacles[a];return`${$(r.type)}障碍物: (${t.data[0]}, ${t.data[1]})<br/>半径: ${r.radius}`}return""}},grid:{left:10,right:10,top:10,bottom:10,containLabel:!0},xAxis:{type:"value",min:0,max:e.mapWidth,axisLine:{show:!0},axisTick:{show:!0},axisLabel:{show:!0}},yAxis:{type:"value",min:0,max:e.mapHeight,axisLine:{show:!0},axisTick:{show:!0},axisLabel:{show:!0}},series:[{name:"原始路径",type:"line",data:e.originalPath,symbol:"circle",symbolSize:8,lineStyle:{width:2,type:"dashed",color:"#909399"},itemStyle:{color:"#909399"},z:1},{name:"当前路径",type:"line",data:e.currentPath,symbol:"circle",symbolSize:8,lineStyle:{width:3,color:"#409EFF"},itemStyle:{color:"#409EFF"},z:2},{name:"AGV",type:"scatter",data:[e.agvPosition],symbol:(t,a)=>"path://M0,-10L10,10L-10,10L0,-10",symbolSize:20,symbolRotate:e.agvDirection,itemStyle:{color:"#67C23A"},z:4},{name:"障碍物",type:"scatter",data:e.obstacles.map(t=>t.position),symbol:"circle",symbolSize:(t,a)=>{const r=a.dataIndex;return e.obstacles[r].radius*2},itemStyle:{color:t=>{const a=t.dataIndex;switch(e.obstacles[a].type){case"static":return"rgba(245, 108, 108, 0.7)";case"moving":return"rgba(230, 162, 60, 0.7)";case"closed":return"rgba(64, 158, 255, 0.7)";default:return"rgba(245, 108, 108, 0.7)"}}},z:3}]};JSON.stringify(s),v.setOption(s)},Y=()=>{if(!g.value)return;if(e.obstacles.length>=5){x.warning("最多添加5个障碍物");return}let s=null,t=!1,a=0;const r=20;for(;!t&&a<r;){if(a++,s=[Math.floor(Math.random()*(e.mapWidth-100)+50),Math.floor(Math.random()*(e.mapHeight-100)+50)],Math.sqrt(Math.pow(s[0]-e.agvPosition[0],2)+Math.pow(s[1]-e.agvPosition[1],2))<50)continue;let p=!1;for(let n=0;n<e.currentPath.length-1;n++)if(F(s,e.currentPath[n],e.currentPath[n+1])<30){p=!0;break}if(p)continue;let y=!1;for(const n of e.obstacles)if(Math.sqrt(Math.pow(s[0]-n.position[0],2)+Math.pow(s[1]-n.position[1],2))<40){y=!0;break}y||(t=!0)}if(!t||!s){x.warning("无法找到合适的障碍物位置，请尝试重置地图");return}e.obstacles.push({position:s,radius:Math.floor(Math.random()*10)+15,type:m.type}),JSON.stringify(e.obstacles),S(),x.success(`已添加${$(m.type)}障碍物`)},$=s=>{switch(s){case"static":return"静态";case"moving":return"移动";case"closed":return"临时封闭区域";default:return""}},F=(s,t,a)=>{const r=s[0]-t[0],b=s[1]-t[1],p=a[0]-t[0],y=a[1]-t[1],n=r*p+b*y,o=p*p+y*y;let d=-1;o!==0&&(d=n/o);let u,P;d<0?(u=t[0],P=t[1]):d>1?(u=a[0],P=a[1]):(u=t[0]+d*p,P=t[1]+d*y);const l=s[0]-u,h=s[1]-P;return Math.sqrt(l*l+h*h)},G=()=>{if(!g.value||e.obstacles.length===0){x.warning("请先初始化地图并添加障碍物");return}e.currentPath=[...e.originalPath],e.agvPosition=e.originalPath[0],S();const s=[...e.currentPath];for(let o=0;o<s.length-1;o++){const d=s[o],u=s[o+1];let P=!1,l=null;for(const h of e.obstacles)if(F(h.position,d,u)<h.radius+10){P=!0,l=h;break}if(P&&l){if(m.strategy==="detour"||m.strategy==="hybrid"&&l.type!=="moving"){const h=[(d[0]+u[0])/2,(d[1]+u[1])/2],w=h[0]-l.position[0],z=h[1]-l.position[1],V=Math.sqrt(w*w+z*z),E=w/V,C=z/V,k=l.radius+20,I=[l.position[0]+E*k,l.position[1]+C*k];s.splice(o+1,0,I),o++}else if((m.strategy==="wait"||m.strategy==="hybrid"&&l.type==="moving")&&(l&&(l.type==="static"||l.type==="closed")&&(P=!0),P&&l)){const h=[(d[0]+u[0])/2,(d[1]+u[1])/2],w=h[0]-l.position[0],z=h[1]-l.position[1],V=Math.sqrt(w*w+z*z),E=w/V,C=z/V,k=l.radius+20,I=[l.position[0]+E*k,l.position[1]+C*k];s.splice(o+1,0,I),o++}}}e.currentPath=s,S();const t=o=>{let d=0;for(let u=0;u<o.length-1;u++)d+=Math.sqrt(Math.pow(o[u+1][0]-o[u][0],2)+Math.pow(o[u+1][1]-o[u][1],2));return d},a=t(e.originalPath),r=t(e.currentPath),b=Math.round(r-a),p=Math.round(b/5),y=Math.round((r/a-1)*100);let n=100;if(m.strategy==="detour")for(const o of e.obstacles)o.type==="moving"?n-=5:o.type==="closed"&&(n-=2);else if(m.strategy==="wait")for(const o of e.obstacles)o.type==="static"?n-=15:o.type==="closed"&&(n-=10);else if(m.strategy==="hybrid")for(const o of e.obstacles)o.type==="static"?n-=2:o.type==="moving"?n-=3:o.type==="closed"&&(n-=5);n=Math.max(50,Math.min(100,n)),M.value={successRate:n,pathExtension:b,timeDelay:p,energyIncrease:y},j(),x.success("避障策略测试完成")},j=()=>{let s=0;const t=e.currentPath.length;e.isSimulating=!0;const a=()=>{if(!e.isSimulating||s>=t-1){e.isSimulating=!1,s>=t-1&&x.success("AGV已到达目的地");return}e.agvPosition=[...e.currentPath[s+1]];const r=e.currentPath[s],b=e.currentPath[s+1];e.agvDirection=Math.atan2(b[1]-r[1],b[0]-r[0])*180/Math.PI,S(),s++,setTimeout(a,500)};a()},O=()=>{g.value&&(e.isSimulating=!1,e.agvPosition=e.originalPath[0],e.agvDirection=0,e.currentPath=[...e.originalPath],e.obstacles=[],M.value=null,S(),x.info("地图已重置"))},H=s=>{switch(s){case"detour":return"绕行策略";case"wait":return"等待策略";case"hybrid":return"混合策略";default:return"未知策略"}},R=()=>{v==null||v.resize()};return U(()=>{window.addEventListener("resize",R)}),W(()=>{window.removeEventListener("resize",R),e.isSimulating=!1,v==null||v.dispose()}),X({obstacleForm:m,testAvoidanceStrategy:G,initMap:q,resetMap:O}),(s,t)=>{const a=K,r=tt,b=et,p=nt,y=at,n=ot,o=st;return L(),A("div",ct,[c(b,{class:"h-full"},{header:f(()=>t[2]||(t[2]=[i("div",{class:"card-header"},[i("span",{class:"text-lg font-medium"},"实时地图")],-1)])),default:f(()=>[i("div",dt,[g.value?(L(),A("div",ut,[i("div",{ref_key:"obstacleMapRef",ref:T,class:"w-full h-full"},null,512)])):(L(),A("div",mt,[i("div",pt,[c(a,{class:"text-3xl mb-2"},{default:f(()=>[c(Q(Z))]),_:1}),t[3]||(t[3]=i("div",null,'点击"初始化地图"按钮显示实时地图及AGV位置',-1))])]))]),i("div",ft,[c(r,{type:"primary",onClick:q,disabled:g.value},{default:f(()=>t[4]||(t[4]=[_("初始化地图")])),_:1},8,["disabled"]),c(r,{type:"success",onClick:Y,disabled:!g.value||e.obstacles.length>=5},{default:f(()=>t[5]||(t[5]=[_("添加障碍物")])),_:1},8,["disabled"]),c(r,{type:"danger",onClick:O,disabled:!g.value},{default:f(()=>t[6]||(t[6]=[_("重置地图")])),_:1},8,["disabled"])])]),_:1}),c(b,{class:"h-full"},{header:f(()=>t[7]||(t[7]=[i("div",{class:"card-header"},[i("span",{class:"text-lg font-medium"},"避障策略测试")],-1)])),default:f(()=>[c(o,{model:m,"label-width":"100px",class:"w-full"},{default:f(()=>[c(n,{label:"障碍物类型"},{default:f(()=>[c(y,{modelValue:m.type,"onUpdate:modelValue":t[0]||(t[0]=d=>m.type=d),placeholder:"选择障碍物类型"},{default:f(()=>[c(p,{label:"静态障碍物",value:"static"}),c(p,{label:"移动障碍物",value:"moving"}),c(p,{label:"临时封闭区域",value:"closed"})]),_:1},8,["modelValue"])]),_:1}),c(n,{label:"避障策略"},{default:f(()=>[c(y,{modelValue:m.strategy,"onUpdate:modelValue":t[1]||(t[1]=d=>m.strategy=d),placeholder:"选择避障策略"},{default:f(()=>[c(p,{label:"绕行策略",value:"detour"}),c(p,{label:"等待策略",value:"wait"}),c(p,{label:"混合策略",value:"hybrid"})]),_:1},8,["modelValue"])]),_:1}),c(n,null,{default:f(()=>[c(r,{type:"primary",onClick:G,disabled:!g.value||e.obstacles.length===0},{default:f(()=>t[8]||(t[8]=[_(" 测试策略 ")])),_:1},8,["disabled"])]),_:1})]),_:1},8,["model"]),i("div",gt,[M.value?(L(),A("div",yt,[t[14]||(t[14]=i("div",{class:"font-medium mb-2"},"测试结果:",-1)),i("div",ht,[i("div",null,[t[9]||(t[9]=i("span",{class:"font-medium"},"策略类型:",-1)),_(" "+D(H(m.strategy)),1)]),i("div",null,[t[10]||(t[10]=i("span",{class:"font-medium"},"避障成功率:",-1)),_(" "+D(M.value.successRate)+"%",1)]),i("div",null,[t[11]||(t[11]=i("span",{class:"font-medium"},"路径延长:",-1)),_(" "+D(M.value.pathExtension)+" 米",1)]),i("div",null,[t[12]||(t[12]=i("span",{class:"font-medium"},"时间延迟:",-1)),_(" "+D(M.value.timeDelay)+" 秒",1)]),i("div",null,[t[13]||(t[13]=i("span",{class:"font-medium"},"能耗增加:",-1)),_(" "+D(M.value.energyIncrease)+"%",1)])])])):(L(),A("p",vt,"避障策略测试结果将在此显示"))])]),_:1})])}}}),Ct=rt(bt,[["__scopeId","data-v-5aa21d05"]]);export{Ct as default};
